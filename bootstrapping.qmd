---
title: "Bootstrapping basics"
author: "Michael Love"
format: 
  beamer:
    fig-width: 5
    fig-height: 3
execute:
  echo: true
  cache: true
---

# sampling variance

```{r echo=FALSE}
library(mvtnorm)
set.seed(1)
n <- 100
mat <- rmvnorm(n,mean=c(0,0),sigma=cbind(c(1,.5),c(.5,1)))
pop <- data.frame(x=mat[,1], y=mat[,2], 
                  color=factor(sample(8,n,TRUE)),
                  shape=sample(16:25,n,TRUE))
little_n <- 20
idx <- sample(n,little_n,FALSE)
dat <- rbind(pop, pop[idx,])
dat$type <- rep(c("population","sample"),c(n,little_n))
library(ggplot2)
ggplot(dat, aes(x,y,color=color,fill=color,shape=shape)) +
  geom_point(size=3, show.legend=FALSE) + 
  scale_shape_identity() +
  facet_wrap(~type)
```

# or when there is not a "population"

```{r echo=FALSE}
grid <- expand.grid(x=-200:200/100,y=-200:200/100)
grid$density <- dmvnorm(grid, mean=c(0,0), sigma=cbind(c(1,.5),c(.5,1)))
dat$density <- dmvnorm(dat[,1:2], mean=c(0,0), sigma=cbind(c(1,.5),c(.5,1)))
ggplot(grid, aes(x,y,z=density)) + 
  geom_contour() + 
  geom_point(data=dat[(n+1):(n+little_n),], 
             aes(color=color,fill=color,shape=shape),
             size=3, show.legend=FALSE) + 
  scale_shape_identity()
```

# estimate a parameter

```{r echo=FALSE}
nreps <- 10
samples <- do.call(rbind, replicate(nreps, { 
  pop[sample(n,little_n,FALSE),]
}, simplify = FALSE))
samples$sample <- factor(rep(1:nreps, each=little_n))
fit <- coef(lm(y ~ x, data=dat[1:n,]))
ggplot(samples, aes(x,y,group=sample,color=sample)) +
  geom_point(size=3, show.legend=FALSE, alpha=.25) + 
  stat_smooth(method="lm", se=FALSE) + 
  geom_abline(slope=fit[2], intercept=fit[1], lty=2)
```

# idea: sub-sampling a sample

# three types of bootstrapping

# example: line with non-normal errors

```{r}
library(dplyr)
library(infer)
library(ggplot2)
set.seed(1)
n <- 200
x <- runif(n)
eps <- rexp(n, 5)
eps <- eps - mean(eps)
slope <- .2
y <- slope * x + eps
plot(x,y)
abline(0, slope, col="red")
dat <- data.frame(x,y)
```

# simple bootstrapping

```{r}
set.seed(1)
boots <- replicate(1000, {
  idx <- sample(n, replace=TRUE)
  coef(lm(y ~ x, data=dat[idx,]))[2]
})
hist(boots)
sd(boots)
```

# using `boot`

```{r}
library(boot)
get_slope <- function(data, idx) {
  coef(lm(y ~ x, data=data[idx,]))[2]
}
boots2 <- boot(dat, get_slope, R=1000)
boots2
plot(boots2)
```

# additional plots

```{r}
library(car)
confint(boots2)
hist(boots2)
```

# {infer} package

S, H, G, C =
Specify, Hypothesize, Generate, Calculate

```{r eval=FALSE}
set.seed(1)
perm <- dat %>% specify(y ~ x) %>%
  hypothesize(null="independence") %>%
  generate(reps=1000, type="permute") %>%
  calculate(stat="slope")
```

# bootstrapping a statistic

```{r}
set.seed(1)
boot <- dat %>% specify(y ~ x) %>%
  generate(reps=1000, type="bootstrap") %>%
  calculate(stat="slope")
visualize(boot, bins=30)
```

# confidence intervals

```{r}
ci <- get_ci(boot)
ci
obs_beta <- dat %>% 
  specify(y ~ x) %>%
  calculate(stat="slope")
```

# visualize

```{r}
visualize(boot, bins=30) +
  shade_confidence_interval(ci, alpha=.3, 
                            fill="yellow", color="orange") + 
  geom_vline(xintercept=obs_beta$stat, 
             color="red", linewidth=1)
```

# versus lm

```{r}
ci
confint(lm(y ~ x), parm="x")
```

# going further

> Bootstrapping Regression Models in R
> An Appendix to An R Companion to Applied Regression, 3rd ed.
> John Fox & Sanford Weisberg

(can find PDF online)

# Fox and Weisberg example

```{r}
library(car)
fit <- lm(y ~ x)
summary(fit)$coef
set.seed(1)
bfit <- Boot(fit, method="residual")
summary(bfit)
confint(bfit)
```
